{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Oliver An opinionated Cromwell orchestration manager. Explore the docs \u00bb Request Feature \u00b7 Report Bug \u00b7 \u2b50 Consider starring the repo! \u2b50 \ud83c\udfa8 Features Workflow Orchestration. Easily submit, inspect, kill, and retry workflows in a Cromwell environment. Better Job Tracking. Jobs can be associated with names and job groups to enable better status reporting. Dynamic Argument Parsing. Specify inputs and options on the command line rather than editing JSON files. Third-party Cloud Integrations. Use the aws and azure subcommands to explore cloud-specific functionality. \ud83d\udcda Getting Started Installation Conda Oliver is distributed as a package using the community-curated Anaconda repository, conda-forge . You'll need to install conda , and we recommend that you first follow the instructions included in the conda-forge documentation to get everything set up! conda install oliver -c conda-forge Python Package Index You can also install Oliver using the Python Package Index ( PyPI ). pip install stjudecloud-oliver Configuring Next, we recommend that you configure oliver so that common arguments can be saved. By default, Oliver will prompt you for the answers interactively. oliver configure If you are setting up Oliver programmatically, you can accept a default configuration ( oliver configure --defaults ) and edit from there using oliver config . \ud83d\ude8c A Quick Tour At its foundation, Oliver is an opinionated job orchestrator for Cromwell. Commonly, you will want to use it to submit a job, inspect a job's status, kill a job, retry a job (possibly with different parameters), and organize job results. If you're interested in a complete overview of Oliver's capabilities, please see the documentation pages . Submit a Job The simplest possible job submission is one which submits a simple workflow with one or more input JSON file(s) and/or key-value pair(s). oliver submit workflow.wdl inputs.json input_key=input_value You can similarly set workflow options and labels by prepending arguments with @ and % respectively. # works for files too! oliver submit workflow.wdl @option=foo %label=bar Please see the docs for more details on job submission. Inspect a Job Once a job is submitted, you can interrogate the Cromwell server about its status. oliver inspect workflow-id If you aren't sure what workflow identifier was given to your job, you can easily track it down using the status subcommand. # detailed view, which shows individual workflow statuses oliver status -d Kill a Job If, for whatever reason, you'd like to stop a job, you can use Oliver to instruct Cromwell to do so. oliver kill workflow-id Retry a Job Retrying a workflow is similarly easy: even if you need to override previously set parameters (e.g. increase the memory capacity for a task). # override previous inputs by specifying arguments (the same way as you would for `submit`). oliver retry workflow-id \ud83d\udda5\ufe0f Development If you are interested in contributing to the code, please first review our CONTRIBUTING.md document. To bootstrap a development environment, please use the following commands. # Clone the repository git clone git@github.com:stjudecloud/oliver.git cd oliver # Link the package with your current Python environment python setup.py develop # Ensure pre-commit is installed to automatically format # code using `black`. brew install pre-commit pre-commit install pre-commit install --hook-type commit-msg \ud83d\udea7\ufe0f Tests Oliver provides a (currently patchy) set of tests \u2014 both unit and end-to-end. To get started with testing, you'll need to bootstrap a Docker test environment (one-time operation). # Start development environment docker image build --tag oliver . docker-compose up --build -d alias docker-run-oliver=\"docker container run \\ -it \\ --rm \\ --network oliver_default \\ --mount type=bind,source=$PWD/seeds,target=/opt/oliver/seeds \\ --mount type=bind,source=$PWD/oliver,target=/opt/oliver/oliver \\ --mount type=bind,source=$PWD/scripts,target=/opt/oliver/scripts \\ --mount type=bind,source=$PWD/tests,target=/opt/oliver/tests \\ --entrypoint '' \\ oliver:latest\" # Seed development environment (make sure Cromwell is live first!) docker-run-oliver bash seeds/seed.sh http://cromwell:8000 seeds/wdl/hello.wdl docker-run-oliver pytest --cov=./ --cov-report=xml To reset your entire docker-compose environment, you can run the following: docker-compose down docker image rm oliver:latest docker image rm oliver_cromwell:latest docker image rm mysql:5.7 docker volume rm oliver_mysql_data docker network rm oliver_default docker image build --tag oliver . docker-compose up --build -d \ud83e\udd1d Contributing Contributions, issues and feature requests are welcome! Feel free to check issues page . You can also take a look at the contributing guide . \ud83d\udcdd License Copyright \u00a9 2020 St. Jude Cloud Team . This project is MIT licensed.","title":"Home"},{"location":"#features","text":"Workflow Orchestration. Easily submit, inspect, kill, and retry workflows in a Cromwell environment. Better Job Tracking. Jobs can be associated with names and job groups to enable better status reporting. Dynamic Argument Parsing. Specify inputs and options on the command line rather than editing JSON files. Third-party Cloud Integrations. Use the aws and azure subcommands to explore cloud-specific functionality.","title":"\ud83c\udfa8 Features"},{"location":"#getting-started","text":"","title":"\ud83d\udcda Getting Started"},{"location":"#installation","text":"","title":"Installation"},{"location":"#conda","text":"Oliver is distributed as a package using the community-curated Anaconda repository, conda-forge . You'll need to install conda , and we recommend that you first follow the instructions included in the conda-forge documentation to get everything set up! conda install oliver -c conda-forge","title":"Conda"},{"location":"#python-package-index","text":"You can also install Oliver using the Python Package Index ( PyPI ). pip install stjudecloud-oliver","title":"Python Package Index"},{"location":"#configuring","text":"Next, we recommend that you configure oliver so that common arguments can be saved. By default, Oliver will prompt you for the answers interactively. oliver configure If you are setting up Oliver programmatically, you can accept a default configuration ( oliver configure --defaults ) and edit from there using oliver config .","title":"Configuring"},{"location":"#a-quick-tour","text":"At its foundation, Oliver is an opinionated job orchestrator for Cromwell. Commonly, you will want to use it to submit a job, inspect a job's status, kill a job, retry a job (possibly with different parameters), and organize job results. If you're interested in a complete overview of Oliver's capabilities, please see the documentation pages .","title":"\ud83d\ude8c A Quick Tour"},{"location":"#submit-a-job","text":"The simplest possible job submission is one which submits a simple workflow with one or more input JSON file(s) and/or key-value pair(s). oliver submit workflow.wdl inputs.json input_key=input_value You can similarly set workflow options and labels by prepending arguments with @ and % respectively. # works for files too! oliver submit workflow.wdl @option=foo %label=bar Please see the docs for more details on job submission.","title":"Submit a Job"},{"location":"#inspect-a-job","text":"Once a job is submitted, you can interrogate the Cromwell server about its status. oliver inspect workflow-id If you aren't sure what workflow identifier was given to your job, you can easily track it down using the status subcommand. # detailed view, which shows individual workflow statuses oliver status -d","title":"Inspect a Job"},{"location":"#kill-a-job","text":"If, for whatever reason, you'd like to stop a job, you can use Oliver to instruct Cromwell to do so. oliver kill workflow-id","title":"Kill a Job"},{"location":"#retry-a-job","text":"Retrying a workflow is similarly easy: even if you need to override previously set parameters (e.g. increase the memory capacity for a task). # override previous inputs by specifying arguments (the same way as you would for `submit`). oliver retry workflow-id","title":"Retry a Job"},{"location":"#development","text":"If you are interested in contributing to the code, please first review our CONTRIBUTING.md document. To bootstrap a development environment, please use the following commands. # Clone the repository git clone git@github.com:stjudecloud/oliver.git cd oliver # Link the package with your current Python environment python setup.py develop # Ensure pre-commit is installed to automatically format # code using `black`. brew install pre-commit pre-commit install pre-commit install --hook-type commit-msg","title":"\ud83d\udda5\ufe0f Development"},{"location":"#tests","text":"Oliver provides a (currently patchy) set of tests \u2014 both unit and end-to-end. To get started with testing, you'll need to bootstrap a Docker test environment (one-time operation). # Start development environment docker image build --tag oliver . docker-compose up --build -d alias docker-run-oliver=\"docker container run \\ -it \\ --rm \\ --network oliver_default \\ --mount type=bind,source=$PWD/seeds,target=/opt/oliver/seeds \\ --mount type=bind,source=$PWD/oliver,target=/opt/oliver/oliver \\ --mount type=bind,source=$PWD/scripts,target=/opt/oliver/scripts \\ --mount type=bind,source=$PWD/tests,target=/opt/oliver/tests \\ --entrypoint '' \\ oliver:latest\" # Seed development environment (make sure Cromwell is live first!) docker-run-oliver bash seeds/seed.sh http://cromwell:8000 seeds/wdl/hello.wdl docker-run-oliver pytest --cov=./ --cov-report=xml To reset your entire docker-compose environment, you can run the following: docker-compose down docker image rm oliver:latest docker image rm oliver_cromwell:latest docker image rm mysql:5.7 docker volume rm oliver_mysql_data docker network rm oliver_default docker image build --tag oliver . docker-compose up --build -d","title":"\ud83d\udea7\ufe0f Tests"},{"location":"#contributing","text":"Contributions, issues and feature requests are welcome! Feel free to check issues page . You can also take a look at the contributing guide .","title":"\ud83e\udd1d Contributing"},{"location":"#license","text":"Copyright \u00a9 2020 St. Jude Cloud Team . This project is MIT licensed.","title":"\ud83d\udcdd License"},{"location":"advanced-usage/","text":"Advanced Usage Below, you will find some examples of advanced usage supported by oliver . Advanced Configuration Output Prefixing In some scenarios, it's helpful to modify the output prefixing reported by Cromwell. For instance, in the case of Cromwell on Azure , Cromwell mounts the storage location as a FUSE filesystem. This leads to Cromwell reporting the location of output files or logs like so: /cromwell-execution/rnaseq_standard/<UUID>/call-multiqc/multiqc_results.tar.gz In general, this location is not ammenable to quickly leveraging in another script to download the file. In this case, we have chosen to create the output_prefix configuration option that allows prefixing any output locations with a string. For instance, if the output prefix is azure://container-name , the reported output of the above will be azure://container-name/cromwell-execution/rnaseq_standard/<UUID>/call-multiqc/multiqc_results.tar.gz This string is much more amenable to copying and pasting. You can set this configuration option by running the following command. oliver config set output_prefix \"azure://container-name\" CosmosDB When using Cromwell on Azure , CosmosDB is used as the metadata store for Cromwell. It can be extremely useful to peer into this metadata to understand failures that happen outside of Cromwell (for instance, within Azure Batch). Thus, we have integrated custom commands (such as oliver cosmos ) to interrogate this database. If you wish to use this functionality, you'll need to set the following configuration parameters. oliver config set azure_resource_group \"YOUR RESOURCE GROUP NAME\" oliver config set cosmos_account_name \"YOUR COSMOSDB ACCOUNT NAME\" For more information, see our [configuration guide][../getting-started/configuration.md].","title":"Advanced Usage"},{"location":"advanced-usage/#advanced-usage","text":"Below, you will find some examples of advanced usage supported by oliver .","title":"Advanced Usage"},{"location":"advanced-usage/#advanced-configuration","text":"","title":"Advanced Configuration"},{"location":"advanced-usage/#output-prefixing","text":"In some scenarios, it's helpful to modify the output prefixing reported by Cromwell. For instance, in the case of Cromwell on Azure , Cromwell mounts the storage location as a FUSE filesystem. This leads to Cromwell reporting the location of output files or logs like so: /cromwell-execution/rnaseq_standard/<UUID>/call-multiqc/multiqc_results.tar.gz In general, this location is not ammenable to quickly leveraging in another script to download the file. In this case, we have chosen to create the output_prefix configuration option that allows prefixing any output locations with a string. For instance, if the output prefix is azure://container-name , the reported output of the above will be azure://container-name/cromwell-execution/rnaseq_standard/<UUID>/call-multiqc/multiqc_results.tar.gz This string is much more amenable to copying and pasting. You can set this configuration option by running the following command. oliver config set output_prefix \"azure://container-name\"","title":"Output Prefixing"},{"location":"advanced-usage/#cosmosdb","text":"When using Cromwell on Azure , CosmosDB is used as the metadata store for Cromwell. It can be extremely useful to peer into this metadata to understand failures that happen outside of Cromwell (for instance, within Azure Batch). Thus, we have integrated custom commands (such as oliver cosmos ) to interrogate this database. If you wish to use this functionality, you'll need to set the following configuration parameters. oliver config set azure_resource_group \"YOUR RESOURCE GROUP NAME\" oliver config set cosmos_account_name \"YOUR COSMOSDB ACCOUNT NAME\" For more information, see our [configuration guide][../getting-started/configuration.md].","title":"CosmosDB"},{"location":"contributing/","text":"Contributing When contributing to this repository, please first discuss the change you wish to make via issue, email, or any other method with the owners of this repository before making a change. Please note we have a code of conduct, please follow it in all your interactions with the project. Pull Request Process Ensure any install or build dependencies are removed before the end of the layer when doing a build. Update the README.md with details of changes to the interface, this includes new environment variables, exposed ports, useful file locations and container parameters. Increase the version numbers in any examples files and the README.md to the new version that this Pull Request would represent. The versioning scheme we use is SemVer . You may merge the Pull Request in once you have the sign-off of two other developers, or if you do not have permission to do that, you may request the second reviewer to merge it for you. Code of Conduct Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [INSERT EMAIL ADDRESS]. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4","title":"Contributing"},{"location":"contributing/#contributing","text":"When contributing to this repository, please first discuss the change you wish to make via issue, email, or any other method with the owners of this repository before making a change. Please note we have a code of conduct, please follow it in all your interactions with the project.","title":"Contributing"},{"location":"contributing/#pull-request-process","text":"Ensure any install or build dependencies are removed before the end of the layer when doing a build. Update the README.md with details of changes to the interface, this includes new environment variables, exposed ports, useful file locations and container parameters. Increase the version numbers in any examples files and the README.md to the new version that this Pull Request would represent. The versioning scheme we use is SemVer . You may merge the Pull Request in once you have the sign-off of two other developers, or if you do not have permission to do that, you may request the second reviewer to merge it for you.","title":"Pull Request Process"},{"location":"contributing/#code-of-conduct","text":"","title":"Code of Conduct"},{"location":"contributing/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"contributing/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"contributing/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"contributing/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"contributing/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [INSERT EMAIL ADDRESS]. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"contributing/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4","title":"Attribution"},{"location":"getting-started/configuration/","text":"Configuration Configuration for Oliver is stored in the config file as JSON. By default, the dotfile is location at ~/.oliver_config . One of the benefits of using Oliver is the \"set and forget\" nature of configuration. For instance, a common configuration option that you might want to set rather than providing on the command line is the URL to your Cromwell server. Basics Before using Oliver, you should run the configuration quickstart wizard: oliver configure If you just want to accept the defaults, or if you are using Oliver in a non interactive environment like CI, you can just start with the default configuration. oliver configure --defaults Similarly, you can use the oliver config subcommand to display current config values, get specific key-value pairs, or set new values for configuration options. # list all config values oliver config list # get a particular key oliver config get cromwell_server # set a particular key's value oliver config set cromwell_server http://foo:8000 Commonly Used Options The following key values pairs are commonly used to configure Oliver. Note that any key in the argparse parser can be specified in the configuration \u2014 if you would like to set any of these options and don't mind looking through Python code, you can do so (we do not exhaustively list all possible config options here). Key Description Type Default cromwell_server HTTP/HTTPS root URL for the Cromwell server to use by default. String http://localhost:8000 cromwell_api_version Cromwell API version to use by default. String v1 batch_interval_mins When inferring batches, how many minutes should separate two batches? Int 2 output_prefix Prefix to append to file locations. String None Cromwell on Azure Specific Key Description Type Default azure_resource_group If using Cromwell on Azure, resource group associated with your Cromwell instance. String cosmos_account_name If using Cromwell on Azure, name of CosmosDB associated with your Cromwell instance. String","title":"Configuration"},{"location":"getting-started/configuration/#configuration","text":"Configuration for Oliver is stored in the config file as JSON. By default, the dotfile is location at ~/.oliver_config . One of the benefits of using Oliver is the \"set and forget\" nature of configuration. For instance, a common configuration option that you might want to set rather than providing on the command line is the URL to your Cromwell server.","title":"Configuration"},{"location":"getting-started/configuration/#basics","text":"Before using Oliver, you should run the configuration quickstart wizard: oliver configure If you just want to accept the defaults, or if you are using Oliver in a non interactive environment like CI, you can just start with the default configuration. oliver configure --defaults Similarly, you can use the oliver config subcommand to display current config values, get specific key-value pairs, or set new values for configuration options. # list all config values oliver config list # get a particular key oliver config get cromwell_server # set a particular key's value oliver config set cromwell_server http://foo:8000","title":"Basics"},{"location":"getting-started/configuration/#commonly-used-options","text":"The following key values pairs are commonly used to configure Oliver. Note that any key in the argparse parser can be specified in the configuration \u2014 if you would like to set any of these options and don't mind looking through Python code, you can do so (we do not exhaustively list all possible config options here). Key Description Type Default cromwell_server HTTP/HTTPS root URL for the Cromwell server to use by default. String http://localhost:8000 cromwell_api_version Cromwell API version to use by default. String v1 batch_interval_mins When inferring batches, how many minutes should separate two batches? Int 2 output_prefix Prefix to append to file locations. String None","title":"Commonly Used Options"},{"location":"getting-started/configuration/#cromwell-on-azure-specific","text":"Key Description Type Default azure_resource_group If using Cromwell on Azure, resource group associated with your Cromwell instance. String cosmos_account_name If using Cromwell on Azure, name of CosmosDB associated with your Cromwell instance. String","title":"Cromwell on Azure Specific"},{"location":"getting-started/monitor-jobs/","text":"Monitoring Jobs TODO","title":"Monitoring Jobs"},{"location":"getting-started/monitor-jobs/#monitoring-jobs","text":"TODO","title":"Monitoring Jobs"},{"location":"getting-started/submit-jobs/","text":"Submitting Jobs One of the novel features provided by Oliver is the ease with which workflow inputs, options, and labels can be set dynamically on the command line. Typically when submitting a workflow, one must craft and POST one or more workflowInputs , workflowOptions , and labels JSON files to Cromwell. This can be cumbersome \u2014 especially when you have thousands of workflows to run. Dynamic Parameter Parsing Oliver provides an improvement over this experience for a few keys reasons: Inputs, options, and labels can be loaded from files or as key-value pairs on the command line. Inputs, options, and labels are processed sequentially and overwrite arguments that were provided earlier on the command line. Oliver distinguishes between inputs, options, and labels based on the prefix provided. For instance, consider the following command: oliver submit workflow.wdl defaults.json sample_name=SJBALL101_D Here, Oliver loads workflow.wdl and begins preparing the workflowInputs (inputs), workflowOptions (options), and labels (labels) JSON objects \u2014 all of which are initialized as {} . Oliver loads the JSON object defined in defaults.json . For each key-value in that object, it adds the pair to workflowInputs , overwriting the pair if it already exists. In this case, the JSON object is empty, so workflowInputs now mirrors what was contained in defaults.json . Oliver recognizes that you have provided sample_name=SJBALL101_D as a key value pair and adds this pair to workflowInputs , overwriting the key if it existed. In this way, you can dynamically set and overwrite inputs with ease to satisfy your use case. Prefixes This process works similarly for all parameter types (inputs, options, or labels). To distinguish them to Oliver, you need to use the following prefixes: Parameter Type Prefix Example Input <none> key=value Option @ @key=value Label % %key=value For example, consider the following command and note the process Oliver follows in the comments: oliver submit workflow.wdl \\ default-inputs.json \\ # loads all values in the JSON file to the inputs object. @default-options.json \\ # loads all values in the JSON file to the options object. %default-labels.json \\ # loads all values in the JSON file to the labels object. input_key=value \\ # adds `input_key=value` to the inputs object (overwrites the value if `input_key` set in default-inputs.json). @option_key=value \\ # adds `option_key=value` to the options object (overwrites the value if `option_key` set in default-options.json). %label_key=value \\ # adds `label_key=value` to the labels object (overwrites the value if `label_key` set in default-labels.json). Inspecting Parameters with Dry Runs Often, it can be useful to inspect how Oliver is parsing the parameters you are passing on the command line. You can easily do so by specifying the dry-run argument. oliver submit workflow.wdl defaults.json sample_name=SJBALL101_D --dry-run","title":"Submitting Jobs"},{"location":"getting-started/submit-jobs/#submitting-jobs","text":"One of the novel features provided by Oliver is the ease with which workflow inputs, options, and labels can be set dynamically on the command line. Typically when submitting a workflow, one must craft and POST one or more workflowInputs , workflowOptions , and labels JSON files to Cromwell. This can be cumbersome \u2014 especially when you have thousands of workflows to run.","title":"Submitting Jobs"},{"location":"getting-started/submit-jobs/#dynamic-parameter-parsing","text":"Oliver provides an improvement over this experience for a few keys reasons: Inputs, options, and labels can be loaded from files or as key-value pairs on the command line. Inputs, options, and labels are processed sequentially and overwrite arguments that were provided earlier on the command line. Oliver distinguishes between inputs, options, and labels based on the prefix provided. For instance, consider the following command: oliver submit workflow.wdl defaults.json sample_name=SJBALL101_D Here, Oliver loads workflow.wdl and begins preparing the workflowInputs (inputs), workflowOptions (options), and labels (labels) JSON objects \u2014 all of which are initialized as {} . Oliver loads the JSON object defined in defaults.json . For each key-value in that object, it adds the pair to workflowInputs , overwriting the pair if it already exists. In this case, the JSON object is empty, so workflowInputs now mirrors what was contained in defaults.json . Oliver recognizes that you have provided sample_name=SJBALL101_D as a key value pair and adds this pair to workflowInputs , overwriting the key if it existed. In this way, you can dynamically set and overwrite inputs with ease to satisfy your use case.","title":"Dynamic Parameter Parsing"},{"location":"getting-started/submit-jobs/#prefixes","text":"This process works similarly for all parameter types (inputs, options, or labels). To distinguish them to Oliver, you need to use the following prefixes: Parameter Type Prefix Example Input <none> key=value Option @ @key=value Label % %key=value For example, consider the following command and note the process Oliver follows in the comments: oliver submit workflow.wdl \\ default-inputs.json \\ # loads all values in the JSON file to the inputs object. @default-options.json \\ # loads all values in the JSON file to the options object. %default-labels.json \\ # loads all values in the JSON file to the labels object. input_key=value \\ # adds `input_key=value` to the inputs object (overwrites the value if `input_key` set in default-inputs.json). @option_key=value \\ # adds `option_key=value` to the options object (overwrites the value if `option_key` set in default-options.json). %label_key=value \\ # adds `label_key=value` to the labels object (overwrites the value if `label_key` set in default-labels.json).","title":"Prefixes"},{"location":"getting-started/submit-jobs/#inspecting-parameters-with-dry-runs","text":"Often, it can be useful to inspect how Oliver is parsing the parameters you are passing on the command line. You can easily do so by specifying the dry-run argument. oliver submit workflow.wdl defaults.json sample_name=SJBALL101_D --dry-run","title":"Inspecting Parameters with Dry Runs"},{"location":"integrations/aws/","text":"AWS The subcommand oliver aws currently exists for the community to try, but it is not stable enough to write a guide for. In the meantime, if you use Cromwell on AWS and would like to suggest features or report bugs you encounter, we invite you to do so on the issues page.","title":"AWS"},{"location":"integrations/aws/#aws","text":"The subcommand oliver aws currently exists for the community to try, but it is not stable enough to write a guide for. In the meantime, if you use Cromwell on AWS and would like to suggest features or report bugs you encounter, we invite you to do so on the issues page.","title":"AWS"},{"location":"integrations/azure/","text":"Azure Oliver was originally created through the St. Jude Cloud team's close collaboration with the Microsoft Genomics team and, specifically, our the development of Cromwell on Azure . As such, we intend to provide first-class support of Cromwell on Azure and common operations like debugging jobs. The subcommand oliver azure currently exists for the community to try, but it is not stable enough to write a guide for. In the meantime, if you use Cromwell on Azure and would like to suggest features or report bugs you encounter, we invite you to do so on the issues page.","title":"Azure"},{"location":"integrations/azure/#azure","text":"Oliver was originally created through the St. Jude Cloud team's close collaboration with the Microsoft Genomics team and, specifically, our the development of Cromwell on Azure . As such, we intend to provide first-class support of Cromwell on Azure and common operations like debugging jobs. The subcommand oliver azure currently exists for the community to try, but it is not stable enough to write a guide for. In the meantime, if you use Cromwell on Azure and would like to suggest features or report bugs you encounter, we invite you to do so on the issues page.","title":"Azure"}]}